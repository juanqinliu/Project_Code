#!/bin/bash

# Color Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print Functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Default Parameters
INPUT_PT=""
OUTPUT_ENGINE=""
INTERMEDIATE_ONNX=""
KEEP_ONNX=true

# PT to ONNX parameters
IMGSZ=640
OPSET=11
NO_SIMPLIFY=false
KEEP_INTERMEDIATE=false
VERBOSE=false

# ONNX to Engine parameters
MIN_BATCH=1
OPT_BATCH=4
MAX_BATCH=32
WORKSPACE=2048
CALIB_DIR="calib_data"
CALIB_LIST="calib_list.txt"
PRECISION="int8"
AUTO_CALIB=false
CALIB_NUM=1000
SKIP_BUILD=false

# Help Message
show_help() {
    echo "End-to-End PT -> ONNX -> TensorRT Engine Export Tool"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Required:"
    echo "  -i, --input <file>        Input PT file"
    echo ""
    echo "Output Options:"
    echo "  -o, --output <file>       Output Engine file (optional, auto-generated by default)"
    echo "  --keep-onnx               Keep intermediate ONNX file (default: keep after conversion)"
    echo "  --delete-onnx             Delete intermediate ONNX file after conversion"
    echo "  --intermediate-onnx <file> Specify intermediate ONNX file name (optional)"
    echo ""
    echo "PT to ONNX Options:"
    echo "  --imgsz <size>           Input image size (default: 640)"
    echo "  --opset <int>            ONNX opset version (default: 11)"
    echo "  --no-simplify            Disable ONNX simplification"
    echo "  --keep-intermediate      Keep intermediate outputs during ONNX export"
    echo "  --verbose                Verbose export logs"
    echo ""
    echo "ONNX to Engine Options:"
    echo "  --batch-min <size>       Minimum batch size (default: 1)"
    echo "  --batch-opt <size>       Optimal batch size (default: 4)"
    echo "  --batch-max <size>       Maximum batch size (default: 32)"
    echo "  --workspace <mb>         Workspace size in MB (default: 2048)"
    echo "  --precision <mode>       Precision mode: int8, fp16, or fp32 (default: int8)"
    echo "  --calib-dir <dir>        Calibration data directory (default: calib_data)"
    echo "  --calib-list <file>      Calibration list file (default: calib_list.txt)"
    echo "  --auto-calib-list        Automatically generate calibration list from calib_dir"
    echo "  --calib-num <n>          Maximum number of samples for auto-generation (default: 1000)"
    echo "  --skip-build             Skip the C++ program compilation"
    echo ""
    echo "Other Options:"
    echo "  -h, --help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -i model.pt                                    # Convert model.pt to model.engine (INT8)"
    echo "  $0 -i model.pt --precision fp16                   # Convert with FP16 precision"
    echo "  $0 -i model.pt --delete-onnx                      # Delete intermediate ONNX file after conversion"
    echo "  $0 -i model.pt --imgsz 1024 --batch-opt 8         # Custom image size and batch"
}

# Parse Command Line Arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -i|--input)
            INPUT_PT="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_ENGINE="$2"
            shift 2
            ;;
        --intermediate-onnx)
            INTERMEDIATE_ONNX="$2"
            shift 2
            ;;
        --keep-onnx)
            KEEP_ONNX=true
            shift
            ;;
        --delete-onnx)
            KEEP_ONNX=false
            shift
            ;;
        --imgsz)
            IMGSZ="$2"
            shift 2
            ;;
        --opset)
            OPSET="$2"
            shift 2
            ;;
        --no-simplify)
            NO_SIMPLIFY=true
            shift
            ;;
        --keep-intermediate)
            KEEP_INTERMEDIATE=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --batch-min)
            MIN_BATCH="$2"
            shift 2
            ;;
        --batch-opt)
            OPT_BATCH="$2"
            shift 2
            ;;
        --batch-max)
            MAX_BATCH="$2"
            shift 2
            ;;
        --workspace)
            WORKSPACE="$2"
            shift 2
            ;;
        --precision)
            PRECISION="$2"
            if [[ "$PRECISION" != "int8" && "$PRECISION" != "fp16" && "$PRECISION" != "fp32" ]]; then
                print_error "Precision mode must be int8, fp16, or fp32"
                exit 1
            fi
            shift 2
            ;;
        --calib-dir)
            CALIB_DIR="$2"
            shift 2
            ;;
        --calib-list)
            CALIB_LIST="$2"
            shift 2
            ;;
        --auto-calib-list)
            AUTO_CALIB=true
            shift
            ;;
        --calib-num)
            CALIB_NUM="$2"
            shift 2
            ;;
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown parameter: $1"
            show_help
            exit 1
            ;;
    esac
done

# Validate required parameters
if [[ -z "$INPUT_PT" ]]; then
    print_error "Input PT file is required. Use -i or --input to specify."
    show_help
    exit 1
fi

print_info "=== End-to-End PT -> ONNX -> TensorRT Engine Export Tool ==="
print_info "Input PT file: $INPUT_PT"

# Convert relative paths to absolute paths
if [[ "$INPUT_PT" != /* ]]; then
    INPUT_PT="$(pwd)/$INPUT_PT"
fi

# Check if input file exists
if [ ! -f "$INPUT_PT" ]; then
    print_error "Input file $INPUT_PT does not exist"
    exit 1
fi

# Generate intermediate ONNX filename if not specified
if [[ -z "$INTERMEDIATE_ONNX" ]]; then
    INPUT_DIR="$(dirname "$INPUT_PT")"
    INPUT_BASE="$(basename "$INPUT_PT" .pt)"
    INTERMEDIATE_ONNX="$INPUT_DIR/$INPUT_BASE.onnx"
fi


# Generate output engine filename if not specified
if [[ -z "$OUTPUT_ENGINE" ]]; then
    INPUT_DIR="$(dirname "$INPUT_PT")"
    INPUT_BASE="$(basename "$INPUT_PT" .pt)"
    OUTPUT_ENGINE="$INPUT_DIR/${INPUT_BASE}_${PRECISION}.engine" # Added precision suffix
fi


# Convert relative paths to absolute paths
if [[ "$INTERMEDIATE_ONNX" != /* ]]; then
    INTERMEDIATE_ONNX="$(pwd)/$INTERMEDIATE_ONNX"
fi

if [[ "$OUTPUT_ENGINE" != /* ]]; then
    OUTPUT_ENGINE="$(pwd)/$OUTPUT_ENGINE"
fi

print_info "Intermediate ONNX file: $INTERMEDIATE_ONNX"
print_info "Output Engine file: $OUTPUT_ENGINE"
print_info "Image size: ${IMGSZ}x${IMGSZ}"
print_info "Batch size range: $MIN_BATCH - $MAX_BATCH (optimal: $OPT_BATCH)"
print_info "Precision mode: $PRECISION"
print_info "Keep intermediate ONNX: $KEEP_ONNX"
echo ""

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Step 1: PT -> ONNX Conversion
print_info "=== Step 1: PT -> ONNX Conversion ==="

PT_TO_ONNX_SCRIPT="$SCRIPT_DIR/pt_to_onnx/export_onnx.sh"
if [ ! -f "$PT_TO_ONNX_SCRIPT" ]; then
    print_error "PT to ONNX script not found: $PT_TO_ONNX_SCRIPT"
    exit 1
fi

# Build PT to ONNX arguments
PT_ARGS=(
    --input "$INPUT_PT"
    --output "$INTERMEDIATE_ONNX"
    --imgsz "$IMGSZ"
    --opset "$OPSET"
)

if [[ "$NO_SIMPLIFY" == true ]]; then
    PT_ARGS+=(--no-simplify)
fi

if [[ "$KEEP_INTERMEDIATE" == true ]]; then
    PT_ARGS+=(--keep-intermediate)
fi

if [[ "$VERBOSE" == true ]]; then
    PT_ARGS+=(--verbose)
fi

# Execute PT to ONNX conversion
"$PT_TO_ONNX_SCRIPT" "${PT_ARGS[@]}"

if [ $? -ne 0 ] || [ ! -f "$INTERMEDIATE_ONNX" ]; then
    print_error "PT -> ONNX conversion failed"
    exit 1
fi

print_success "PT -> ONNX conversion completed"
echo ""

# Step 2: ONNX -> Engine Conversion
print_info "=== Step 2: ONNX -> TensorRT Engine Conversion ==="

ONNX_TO_ENGINE_SCRIPT="$SCRIPT_DIR/onnx_to_engine/export_engine.sh"
if [ ! -f "$ONNX_TO_ENGINE_SCRIPT" ]; then
    print_error "ONNX to Engine script not found: $ONNX_TO_ENGINE_SCRIPT"
    exit 1
fi

# Build ONNX to Engine arguments
ENGINE_ARGS=(
    --input "$INTERMEDIATE_ONNX"
    --output "$OUTPUT_ENGINE"
    --batch-min "$MIN_BATCH"
    --batch-opt "$OPT_BATCH"
    --batch-max "$MAX_BATCH"
    --imgsz "$IMGSZ"
    --workspace "$WORKSPACE"
    --precision "$PRECISION"
)

# Add calibration parameters for INT8 mode
if [[ "$PRECISION" == "int8" ]]; then
    ENGINE_ARGS+=(
        --calib-dir "$CALIB_DIR"
        --calib-list "$CALIB_LIST"
    )
    
    if [[ "$AUTO_CALIB" == true ]]; then
        ENGINE_ARGS+=(--auto-calib-list)
        ENGINE_ARGS+=(--calib-num "$CALIB_NUM")
    fi
fi

if [[ "$SKIP_BUILD" == true ]]; then
    ENGINE_ARGS+=(--skip-build)
fi

# Execute ONNX to Engine conversion
"$ONNX_TO_ENGINE_SCRIPT" "${ENGINE_ARGS[@]}"

if [ $? -ne 0 ] || [ ! -f "$OUTPUT_ENGINE" ]; then
    print_error "ONNX -> Engine conversion failed"
    # Clean up intermediate ONNX file if conversion failed and not keeping it
    if [[ "$KEEP_ONNX" == false ]] && [ -f "$INTERMEDIATE_ONNX" ]; then
        rm "$INTERMEDIATE_ONNX"
        print_info "Cleaned up intermediate ONNX file"
    fi
    exit 1
fi

print_success "ONNX -> Engine conversion completed"
echo ""

# Step 3: Cleanup (if requested)
if [[ "$KEEP_ONNX" == false ]]; then
    print_info "=== Step 3: Cleanup ==="
    if [ -f "$INTERMEDIATE_ONNX" ]; then
        rm "$INTERMEDIATE_ONNX"
        print_success "Removed intermediate ONNX file: $INTERMEDIATE_ONNX"
    fi
    echo ""
fi

# Final Summary
print_success "============== End-to-End Conversion Completed =============="
print_info "Input PT file: $INPUT_PT ($(du -h "$INPUT_PT" | cut -f1))"
if [[ "$KEEP_ONNX" == true ]] && [ -f "$INTERMEDIATE_ONNX" ]; then
    print_info "Intermediate ONNX: $INTERMEDIATE_ONNX ($(du -h "$INTERMEDIATE_ONNX" | cut -f1))"
fi
print_info "Output Engine file: $OUTPUT_ENGINE ($(du -h "$OUTPUT_ENGINE" | cut -f1))"
print_info "Configuration: ${PRECISION^^} precision + Dynamic batching ($MIN_BATCH-$MAX_BATCH)"
print_info "Recommended batch size: $OPT_BATCH for optimal performance"
print_info "Image input size: ${IMGSZ}x${IMGSZ}"

echo ""
print_success "Your model is ready for inference!"
print_info "You can now use the engine file: $OUTPUT_ENGINE"
